# -*- coding: utf-8 -*-
"""DTT_C1_V1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dFB_RRDMPkT_QZNc6YtdTsA6f-h-8VQx
"""

#pip install streamlit pandas numpy pillow matplotlib scikit-learn

import streamlit as st
import pandas as pd
import numpy as np
from PIL import Image
import matplotlib.pyplot as plt
import io

# Title of the App
st.title("📝 AI-Powered Data & Visual Report Generator")

# Sidebar to choose between CSV or Image processing
option = st.sidebar.selectbox("Choose an option", ["CSV File Analysis", "Visual Data Analysis"])

if option == "CSV File Analysis":
    st.header("📂 Upload a CSV File for Analysis")

    # Upload CSV File
    uploaded_file = st.file_uploader("Upload a CSV file", type=["csv"])

    if uploaded_file is not None:
        # Read CSV
        df = pd.read_csv(uploaded_file)

        # Show dataset preview
        st.write("### 🔍 Data Preview")
        st.dataframe(df.head())

        # Show summary statistics
        st.write("### 📊 Data Summary")
        st.write(df.describe())

        # Show missing values
        st.write("### ❓ Missing Values")
        st.write(df.isnull().sum())

        # Generate simple text summary
        st.write("### 📝 Automated Text Summary")
        num_rows, num_cols = df.shape
        summary_text = f"The dataset contains **{num_rows} rows** and **{num_cols} columns**. "
        summary_text += f"The mean of numerical columns is:\n\n{df.mean()}."
        st.write(summary_text)

elif option == "Visual Data Analysis":
    st.header("🖼 Upload an Image/Chart for Automated Reporting")

    # Upload Image File
    uploaded_image = st.file_uploader("Upload an Image (e.g., Chart, Graph, or Illustration)", type=["jpg", "png", "jpeg"])

    if uploaded_image is not None:
        # Open and display the image
        image = Image.open(uploaded_image)
        st.image(image, caption="Uploaded Image", use_column_width=True)

        # Convert image to grayscale for analysis
        grayscale = image.convert("L")

        # Compute some basic statistics
        img_array = np.array(grayscale)
        brightness = np.mean(img_array)
        contrast = np.std(img_array)

        # Generate text summary
        st.write("### 📊 Image Insights")
        st.write(f"- The average brightness of the image is **{brightness:.2f}**.")
        st.write(f"- The contrast level is **{contrast:.2f}**.")
        st.write("This image could represent a highly contrasted scene if the contrast is high.")

st.sidebar.write("🔍 Built using Streamlit")
